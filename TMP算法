#include<iostream>
#include<string>
using namespace std;

void cal_next(string str, int *next)
{
    next[0] = -1;//next[0]初始化为-1，-1表示不存在相同的最大前缀和最大后缀
    int k = -1;//k初始化为-1
	int len=str.length();
    for (int q = 1; q < len; q++)
    {
        while (k > -1 && str[k + 1] != str[q])//如果下一个不同，那么k就变成next[k]，注意next[k]是小于k的，无论k取任何值。
         {
            k = next[k];//往前回溯
        }
        if (str[k + 1] == str[q])//如果相同，k++
        {
            k = k + 1;
        }
        next[q] = k;//这个是把算的k的值（就是相同的最大前缀和最大后缀长）赋给next[q]
    }
}
void KMP(string  str, string  ptr)
{
	int slen=str.length();
	int plen=ptr.length();
    int *next = new int[plen];
    cal_next(ptr, next);//计算next数组
    int k = -1;
    for (int i = 0; i < slen; i++)
    {
		int static count=0;
        while (k >-1&& ptr[k + 1] != str[i])//ptr和str不匹配，且k>-1（表示ptr和str有部分匹配）
            k = next[k];//往前回溯
        if (ptr[k + 1] == str[i])
            k = k + 1;
        if (k == plen-1)//说明k移动到ptr的最末端
        {
			count+=1;
            cout<<"第"<<count<<"个匹配的位置"<<i-k<<endl;//返回相应的位置
            k = -1;//重新初始化，寻找下一个
        }
    }
	delete next; 
	next=NULL;
    
}
int main ()
{
	string str  = string("bacdsabsdfscafabacamabsdfscabdsabaffdabsdfscasfdsfabaabsdfscabacasdsd");
	string ptr  = string("absdfsca");
   KMP(str,ptr);
	system("pause");
  return 0;
}
